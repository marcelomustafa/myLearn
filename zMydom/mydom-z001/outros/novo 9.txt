Desculpe pela confusão anterior. Aqui está o exemplo ajustado para que os parâmetros sejam passados na URL da requisição:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class MyService {
  constructor(private http: HttpClient) {}

  sendArrayAsParams(myArray: any[]): void {
    const url = 'https://api.example.com/endpoint';

    const queryParams = myArray.map((item, index) => {
      const paramName = `param${index + 1}`;
      return `${paramName}=${item}`;
    }).join('&');

    const requestUrl = `${url}?${queryParams}`;

    this.http.get(requestUrl)
      .subscribe(
        (response) => {
          // Manipule a resposta da requisição HTTP aqui
        },
        (error) => {
          // Manipule os erros da requisição HTTP aqui
        }
      );
  }
}



/*******
/*******

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class MyService {
  constructor(private http: HttpClient) {}

  sendObjectsAsParams(myObjects: any[]): void {
    const url = 'https://api.example.com/endpoint';

    const queryParams = myObjects.map((obj, index) => {
      const params = Object.entries(obj).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
      return params.join('&');
    }).join('&');

    const requestUrl = `${url}?${queryParams}`;

    this.http.get(requestUrl)
      .subscribe(
        (response) => {
          // Manipule a resposta da requisição HTTP aqui
        },
        (error) => {
          // Manipule os erros da requisição HTTP aqui
        }
      );
  }
}





/*******
/*******


import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class MyService {
  constructor(private http: HttpClient) {}

  sendObjectAsParams(myObject: any): void {
    const url = 'https://api.example.com/endpoint';

    const params = new HttpParams();

    for (const key in myObject) {
      if (myObject.hasOwnProperty(key)) {
        params.set(key, myObject[key]);
      }
    }

    this.http.get(url, { params })
      .subscribe(
        (response) => {
          // Manipule a resposta da requisição HTTP aqui
        },
        (error) => {
          // Manipule os erros da requisição HTTP aqui
        }
      );
  }
}



/*******
/*******

export class MinhaClasse {
  num1: number;
  num2: number;
  string: string;

  constructor(num1: number, num2: number, string: string) {
    this.num1 = num1;
    this.num2 = num2;
    this.string = string;
  }
}

MinhaClasse.prototype.metodo = function(): [number, number] {
  return [this.num1, this.num2];
};

const objeto = new MinhaClasse(1, 2, "string");
console.log(objeto.metodo());