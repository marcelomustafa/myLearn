/*******
Defina as interfaces Page e Pageable para representar o retorno da API e os dados de paginação:

interface Page<T> {
  content: T[];
  totalPages: number;
  totalElements: number;
}

interface Pageable {
  page?: number;
  size?: number;
  sort?: string;
}

/*******
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'https://exemplo.com/api'; // Substitua pelo URL da sua API

  constructor(private http: HttpClient) { }

  realizarRequisicao(array: any[], pageable: Pageable): Observable<Page<any>> {
    const url = `${this.apiUrl}/endpoint?page=${pageable.page}&size=${pageable.size}`; // Substitua pelo endpoint correto da sua API
	
	if (pageable.sort) {
	  url += `&sort=${pageable.sort}`;
	}	

    // Construa o objeto de corpo da requisição com o array e os dados de paginação
    const corpoRequisicao = {
      array: array,
      pageable: pageable
    };

    // Defina as opções da requisição, incluindo os headers se necessário
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json'
      })
    };

    // Realize a requisição POST e retorne o Observable da página de retorno
    return this.http.post<Page<any>>(url, corpoRequisicao, httpOptions);
  }
}


/*******
import { Component } from '@angular/core';
import { ApiService } from './api.service';

@Component({
  selector: 'app-meu-componente',
  template: `
    <button (click)="enviarRequisicao()">Enviar Requisição</button>
  `
})
export class MeuComponente {
  constructor(private apiService: ApiService) { }

  enviarRequisicao(): void {
    const array = [1, 2, 3]; // Exemplo de array para a requisição
    const pageable: Pageable = {
      page: 0, // Exemplo de número da página (inicia em 0)
      size: 10 // Exemplo de tamanho da página (quantidade de elementos por página)
	  sort: 'campo1,desc,campo2,asc' // Exemplo de ordenação com dois campos: campo1 descendente, campo2 ascendente
    };

    this.apiService.realizarRequisicao(array, pageable)
      .subscribe(
        response => {
          // Faça algo com a página de retorno
          console.log(response);
        },
        error => {
          // Trate erros, se necessário
          console.error(error);
        }
      );
  }
}



/*******
/*******
@RestController
@RequestMapping("/api")
public class ApiController {

    @PostMapping("/endpoint")
    public Page<Object> handleRequest@RequestBody RequestData requestData, Pageable pageable) {
        // Obtenha o array e os dados de paginação da requisição
        List<Object> array = requestData.getArray();

		// Obtenha o objeto Sort do Pageable
		Sort sort = pageable.getSort();		
        

		// Execute a lógica necessária com o array, o Pageable e o Sort
		// ...

        // Retorne uma página fictícia como exemplo
        List<Object> content = Arrays.asList("Item 1", "Item 2", "Item 3");
        int totalElements = 3;

        return new PageImpl<>(content, pageable, totalElements);
    }
}



/*******
/*******
/*******
/*******

Opcionalmente, você pode configurar as propriedades padrão do Pageable para evitar a necessidade de fornecer os parâmetros em todas as requisições. Para fazer isso, adicione a seguinte configuração em sua classe de configuração do Spring:

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.List;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Bean
    public PageableHandlerMethodArgumentResolver pageableResolver() {
        PageableHandlerMethodArgumentResolver resolver = new PageableHandlerMethodArgumentResolver();
        resolver.setFallbackPageable(PageRequest.of(0, 10)); // Configuração padrão de página 0 e tamanho 10
        return resolver;
    }

    @Override
    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
        resolvers.add(pageableResolver());
    }
}

**************************************************

Agora, o método handleRequest() recebe um parâmetro Pageable, que inclui informações de paginação e ordenação.

No exemplo acima, você pode utilizar o objeto Sort para obter informações sobre a ordenação. Por exemplo, você pode verificar os campos de ordenação e a direção usando sort.getOrderFor("nomeDoCampo").getDirection().
